paths:
  /auth/register:
    post:
      summary: 'Register a new user'
      tags:
        - auth
      requestBody:
        $ref: '#/components/requestBody/userReg'

      responses:
        201:
          description: 'User data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userRes'
        400:
          description: 'Bad request error message'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'All fields are required.'

  /auth/login:
    post:
      summary: 'Log user in'
      tags:
        - auth
      requestBody:
        $ref: '#/components/requestBody/userLog'

      responses:
        200:
          description: 'JWT token'
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
        400:
          description: 'Bad request error message'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'All fields are required.'
        401:
          description: 'Authorization error message'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'E-mail or password is incorrect.'
        500:
          description: 'Server error message'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Server error.'

 
components:
  schemas:
    userReg:
      type: object
      properties:
        firstName:
          type: string
          max: 20
          example: Tom
        lastName:
          type: string
          max: 20
          example: Test
        email:
          type: string
          format: email
          max: 100
          example: tom.test@tmail.com
        password:
          type: string
          format: password
          min: 8
          max: 100
          example: Abcd1234
      required:
        - firstName
        - lastName
        - email
        - password
    
    userLog:
      type: object
      properties:
        email:
          type: string
          example: tom.test@gmail.com
        password:
          type: string
          example: Abcd1234
      required:
        - email
        - password

    userRes:
      type: object
      properties:
        firstName:
          type: string
          example: Tom
        lastName:
          type: string
          example: Test
        email:
          type: string
          example: tom.test@tmail.com
        _id:
          type: string
          example: 62d6bc1900cec15491b56907
   
  requestBody:
    userReg:
      description: JSON object containing userReg schema
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/userReg'
    userLog:
      description: JSON object containing userLog schema
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/userLog'